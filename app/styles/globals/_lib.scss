// _lib.scss

@mixin background-size($vars...) {
	-webkit-background-size: $vars;
	-moz-background-size: $vars;
	-o-background-size: $vars;
	background-size: $vars;
}

@mixin bg-gradient-tb($start-colour, $end-colour) {
	// background-color: $end-colour;
	background-image: -webkit-gradient(linear, left top, left bottom, from($start-colour), to($end-colour));
	background-image: -webkit-linear-gradient(top, $start-colour, $end-colour);
	background-image:    -moz-linear-gradient(top, $start-colour, $end-colour);
	background-image:     -ms-linear-gradient(top, $start-colour, $end-colour);
	background-image:      -o-linear-gradient(top, $start-colour, $end-colour);
	background-image:         linear-gradient(to bottom, $start-colour, $end-colour);
	filter: progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{$start-colour}', end-colourStr='#{$end-colour}');
}

@mixin transition($vars...) {
	-webkit-transition: $vars;
  -moz-transition: $vars;
  -ms-transition: $vars;
  -o-transition: $vars;
  transition: $vars;
}

@mixin circle-colors($primary-color, $border-color) {
	.bar, .fill { border-color: $primary-color !important;}

	&:hover{
		> span { color: $border-color; }
	}
}

@mixin transformable($delta) {
    -webkit-transition: all $delta linear;
    -moz-transition: all $delta linear;
    -o-transition: all $delta linear;
    -ms-transition: all $delta linear;
    transition: all $delta linear;
}

.transformable {
	@include transformable(1000ms);
}
